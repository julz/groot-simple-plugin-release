// Code generated by counterfeiter. DO NOT EDIT.
package grootfakes

import (
	"sync"

	"code.cloudfoundry.org/groot"
)

type FakeLayerIDGenerator struct {
	GenerateLayerIDStub        func(localRootfsPath string) (string, error)
	generateLayerIDMutex       sync.RWMutex
	generateLayerIDArgsForCall []struct {
		localRootfsPath string
	}
	generateLayerIDReturns struct {
		result1 string
		result2 error
	}
	generateLayerIDReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLayerIDGenerator) GenerateLayerID(localRootfsPath string) (string, error) {
	fake.generateLayerIDMutex.Lock()
	ret, specificReturn := fake.generateLayerIDReturnsOnCall[len(fake.generateLayerIDArgsForCall)]
	fake.generateLayerIDArgsForCall = append(fake.generateLayerIDArgsForCall, struct {
		localRootfsPath string
	}{localRootfsPath})
	fake.recordInvocation("GenerateLayerID", []interface{}{localRootfsPath})
	fake.generateLayerIDMutex.Unlock()
	if fake.GenerateLayerIDStub != nil {
		return fake.GenerateLayerIDStub(localRootfsPath)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateLayerIDReturns.result1, fake.generateLayerIDReturns.result2
}

func (fake *FakeLayerIDGenerator) GenerateLayerIDCallCount() int {
	fake.generateLayerIDMutex.RLock()
	defer fake.generateLayerIDMutex.RUnlock()
	return len(fake.generateLayerIDArgsForCall)
}

func (fake *FakeLayerIDGenerator) GenerateLayerIDArgsForCall(i int) string {
	fake.generateLayerIDMutex.RLock()
	defer fake.generateLayerIDMutex.RUnlock()
	return fake.generateLayerIDArgsForCall[i].localRootfsPath
}

func (fake *FakeLayerIDGenerator) GenerateLayerIDReturns(result1 string, result2 error) {
	fake.GenerateLayerIDStub = nil
	fake.generateLayerIDReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLayerIDGenerator) GenerateLayerIDReturnsOnCall(i int, result1 string, result2 error) {
	fake.GenerateLayerIDStub = nil
	if fake.generateLayerIDReturnsOnCall == nil {
		fake.generateLayerIDReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateLayerIDReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLayerIDGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateLayerIDMutex.RLock()
	defer fake.generateLayerIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLayerIDGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.LayerIDGenerator = new(FakeLayerIDGenerator)
