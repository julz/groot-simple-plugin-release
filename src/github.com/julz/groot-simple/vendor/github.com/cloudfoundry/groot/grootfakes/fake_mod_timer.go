// Code generated by counterfeiter. DO NOT EDIT.
package grootfakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/groot"
)

type FakeModTimer struct {
	ModTimeStub        func(pathname string) (time.Time, error)
	modTimeMutex       sync.RWMutex
	modTimeArgsForCall []struct {
		pathname string
	}
	modTimeReturns struct {
		result1 time.Time
		result2 error
	}
	modTimeReturnsOnCall map[int]struct {
		result1 time.Time
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeModTimer) ModTime(pathname string) (time.Time, error) {
	fake.modTimeMutex.Lock()
	ret, specificReturn := fake.modTimeReturnsOnCall[len(fake.modTimeArgsForCall)]
	fake.modTimeArgsForCall = append(fake.modTimeArgsForCall, struct {
		pathname string
	}{pathname})
	fake.recordInvocation("ModTime", []interface{}{pathname})
	fake.modTimeMutex.Unlock()
	if fake.ModTimeStub != nil {
		return fake.ModTimeStub(pathname)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modTimeReturns.result1, fake.modTimeReturns.result2
}

func (fake *FakeModTimer) ModTimeCallCount() int {
	fake.modTimeMutex.RLock()
	defer fake.modTimeMutex.RUnlock()
	return len(fake.modTimeArgsForCall)
}

func (fake *FakeModTimer) ModTimeArgsForCall(i int) string {
	fake.modTimeMutex.RLock()
	defer fake.modTimeMutex.RUnlock()
	return fake.modTimeArgsForCall[i].pathname
}

func (fake *FakeModTimer) ModTimeReturns(result1 time.Time, result2 error) {
	fake.ModTimeStub = nil
	fake.modTimeReturns = struct {
		result1 time.Time
		result2 error
	}{result1, result2}
}

func (fake *FakeModTimer) ModTimeReturnsOnCall(i int, result1 time.Time, result2 error) {
	fake.ModTimeStub = nil
	if fake.modTimeReturnsOnCall == nil {
		fake.modTimeReturnsOnCall = make(map[int]struct {
			result1 time.Time
			result2 error
		})
	}
	fake.modTimeReturnsOnCall[i] = struct {
		result1 time.Time
		result2 error
	}{result1, result2}
}

func (fake *FakeModTimer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.modTimeMutex.RLock()
	defer fake.modTimeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeModTimer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ groot.ModTimer = new(FakeModTimer)
